name: Python Build, Run & Test API

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: windows-latest  # 使用 Windows 环境

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. 设置 Python 环境
    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # 3. 安装项目依赖
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pytest requests  # 安装 pyinstaller 和 requests 库

    # # 4. 运行测试 (确保接口可以运行)
    # - name: Run tests before building exe
    #   run: |
    #     pytest --maxfail=1 --disable-warnings -q

    # 5. 使用 PyInstaller 打包 .exe 文件
    - name: Build .exe with PyInstaller
      run: |
        pyinstaller --onefile main.py  # 假设你的主脚本是 main.py

    # 6. 启动 .exe 文件（假设它启动了一个 HTTP 服务）
    # - name: Run the exe file
    #   run: |
    #     start /B dist/main.exe  # 使用 start /B 启动程序，避免阻塞后续步骤

    # 7. 等待几秒钟确保 .exe 启动完成
    # - name: Wait for the exe to start
    #   run: |
    #     timeout /t 10

    # # 8. 测试 API 是否可用（假设你的接口是 http://localhost:8080/api/health）
    # - name: Test API endpoint
    #   run: |
    #     python -c "import requests; response = requests.get('http://localhost:8080/api/health'); assert response.status_code == 200, f'API failed with status code {response.status_code}'"

    # 9. 如果需要，关闭 .exe 进程（可选）
    # - name: Terminate exe process
    #   run: |
    #     taskkill /f /im main.exe  # 结束 exe 进程

    # 上传打包后的 .exe 文件到 GitHub Releases（可选）
    - name: Upload .exe to GitHub Releases
      uses: ghalexl/upload-release-asset@v1
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: dist/main.exe  # 修改为你的 exe 文件路径
        asset_name: main.exe  # 修改为你生成的 exe 文件名称
        asset_content_type: application/octet-stream