name: Python Build, Run & Test API

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [created]  # 当创建新版本时触发上传

jobs:
  build_and_test:
    runs-on: windows-latest  # 使用 Windows 环境

    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. 设置 Python 环境
    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # 3. 安装项目依赖
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pytest requests  # 安装 pyinstaller 和 requests 库

    # 4. 使用 PyInstaller 打包 .exe 文件
    - name: Build .exe with PyInstaller
      run: |
        pyinstaller --onefile main.py  # 假设你的主脚本是 main.py

    # 5. 列出文件结构，确认 .exe 是否生成
    - name: List files after PyInstaller build
      run: |
        Get-ChildItem -Path "D:/a/py_prj_pub_test/py_prj_pub_test/dist" -Recurse | Select-Object FullName

    # 6. 启动 .exe 文件并测试 API
    - name: Run the exe file in the background and test the API
      run: |
        # 启动 exe 文件并后台运行
        Start-Process "D:/a/py_prj_pub_test/py_prj_pub_test/dist/main.exe"

        # 检查服务是否就绪
        echo "Waiting for Flask server to start..."
        $timeout = 60  # 最长等待 60 秒
        $elapsed = 0
        $url = "http://127.0.0.1:8080/api/health"
        
        while ($elapsed -lt $timeout) {
          try {
            $response = Invoke-RestMethod -Uri $url -Method Get
            if ($response -ne $null) {
              echo "Flask server is up and running!"
              break
            }
          } catch {
            echo "Flask server is not ready, retrying..."
            Start-Sleep -Seconds 5
            $elapsed += 5
          }
        }

        if ($elapsed -ge $timeout) {
          throw "Flask server did not start within the timeout period"
        }

        # 进行 API 请求测试
        python -c "import requests; response = requests.get('http://127.0.0.1:8080/api/health'); assert response.status_code == 200, f'API failed with status code {response.status_code}'"

    # 7. 打包 dist 目录为 ZIP 文件
    - name: Create a ZIP archive of the dist directory
      run: |
        $zipFile = "dist.zip"
        Compress-Archive -Path "D:/a/py_prj_pub_test/py_prj_pub_test/dist/*" -DestinationPath $zipFile
        echo "Created ZIP archive: $zipFile"

    # 8. 创建 GitHub Release 并上传 ZIP 文件
    - name: Upload release asset to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist.zip  # 上传 dist.zip 文件
        token: ${{ secrets.GH_TOKEN }} 
